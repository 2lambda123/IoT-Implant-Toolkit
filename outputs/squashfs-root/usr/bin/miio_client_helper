#!/bin/sh
. /usr/share/libubox/jshn.sh

MICO_SYSLOG_BINDDEVICE="[MICOREGISTER]"
MIIO_RECV_LINE="/usr/bin/miio_recv_line"
MIIO_SEND_LINE="/usr/bin/miio_send_line"
WIFI_MAX_RETRY=5
WIFI_RETRY_INTERVAL=3
WIFI_SSID=
SN=$(/bin/getmac.sh sn)
UID=
after_wifi_start=

DINFO_MODEL="xiaomi.wifispeaker.s12"
ROM_TYPE=$(uci -c /usr/share/mico get version.version.HARDWARE)
case $ROM_TYPE in
    S12|S12A|s12|s12a)
        DINFO_MODEL="xiaomi.wifispeaker.s12"
    ;;
    LX01|lx01)
        DINFO_MODEL="xiaomi.wifispeaker.lx01"
    ;;
esac


warn_log()
{
    logger -t miio_helper -p 3 "$*"
}

mico_log()
{
    echo "${MICO_SYSLOG_BINDDEVICE} $*"
    logger -t miio_helper -p 3 "${MICO_SYSLOG_BINDDEVICE} $*"
}

# contains(string, substring)
#
# Returns 0 if the specified string contains the specified substring,
# otherwise returns 1.
contains()
{
    local string="$1"
    local substring="$2"

     # $substring is in $string
    [ test "${string#*$substring}" != "$string" ] &&　return 0    

    # $substring is not in $string
    return 1    
}

helper_ready_send()
{
    local RSP_BUF="{\"method\":\"_internal.helper_ready\"}"

    mico_log "RESPONSE:" $RSP_BUF
    $MIIO_SEND_LINE "$RSP_BUF"
}

process_didkeymac2()
{
    local RSP_BUF=""
    echo "Got _internal.req_didkeymac2"

    RESPONSE=`${PLUGIN_MISPEAKER}`
    if [ x$RESPONSE = x ]; then
         RESPONSE=\"NULL\"
    fi

    RSP_BUF="{\"method\":\"_internal.res_didkeymac2\",\"params\":$RESPONSE,\"mac\":\"$MAC\"}"
    mico_log "RESPONSE:" $RSP_BUF
    $MIIO_SEND_LINE "$RSP_BUF"
}

process_wifi_status()
{
    local RSP_BUF=""
#          if [ ! -f /data/wifi/supplicant ]; then
    echo "Got _internal.req_wifi_conf_status"
    if [ -f /tmp/ap_config_mode_flag ]; then
        mico_log "miio enter ap config mode"
        RSP_BUF="{\"method\":\"_internal.res_wifi_conf_status\",\"params\":0}"
    else
        mico_log "miio enter sta mode"
        RSP_BUF="{\"method\":\"_internal.res_wifi_conf_status\",\"params\":1}"
    fi

    mico_log "RESPONSE:" $RSP_BUF
    $MIIO_SEND_LINE "$RSP_BUF"
}

process_dinfo()
{
    local RSP_BUF=""
    local dinfo_did=`/bin/getmac.sh did | head -n1`
    local dinfo_key=`/bin/getmac.sh did | tail -n1`
    local dinfo_vendor="xiaomi"
    local dinfo_mac=`/bin/getmac.sh mac`
    local dinfo_model=$DINFO_MODEL

    echo "Got _internal.request_dinfo"

    RSP_BUF="{\"method\":\"_internal.response_dinfo\",\"params\":{"
    if [ x$dinfo_did != x ]; then
	RSP_BUF="$RSP_BUF\"did\":$dinfo_did"
    fi
    if [ x$dinfo_key != x ]; then
	RSP_BUF="$RSP_BUF,\"key\":\"$dinfo_key\""
    fi

    RSP_BUF="$RSP_BUF,\"vendor\":\"$dinfo_vendor\""

    if [ x$dinfo_mac != x ]; then
	RSP_BUF="$RSP_BUF,\"mac\":\"$dinfo_mac\""
    fi
    if [ x$dinfo_model != x ]; then
	RSP_BUF="$RSP_BUF,\"model\":\"$dinfo_model\""
    fi
    RSP_BUF="$RSP_BUF}}"

    mico_log "RESPONSE:" $RSP_BUF
    $MIIO_SEND_LINE "$RSP_BUF"

}

process_dtoken()
{
    local RSP_BUF=""

    echo "Got _internal.request_dtoken"
    local dtoken_string=$1
    local dtoken_dir=${dtoken_string##*dir\":\"}
    dtoken_dir=${dtoken_dir%%\"*}
    local dtoken_token=${dtoken_string##*ntoken\":\"}
    dtoken_token=${dtoken_token%%\"*}

    dtoken_file="/data/miio/dtoken"
    if [ ! -f "$dtoken_file" ]; then
	mkdir -p /data/miio
	echo "$dtoken_token" > "$dtoken_file"
	sync "$dtoken_file"
    else
	dtoken_token=`cat $dtoken_file`
    fi

    RSP_BUF="{\"method\":\"_internal.response_dtoken\",\"params\":\"${dtoken_token}\"}"

    mico_log "RESPONSE:" $RSP_BUF
    $MIIO_SEND_LINE "$RSP_BUF"
}

process_info()
{   
    local RSP_BUF=
    local ifname=
    local ssid=
    local bssid=
    local ip=
    local wpa_status=
    local vendor=
    local gw=
    local netmask=
    local rom_version=
    local UID=

    wpa_status=`wpa_cli status`

    ifname=$(echo $wpa_status|awk -F \' '{print $2}')
    echo "ifname1: $ifname"

    ssid=`cat /data/wifi/wpa_supplicant.conf | grep ' ssid=' | cut -d '"' -f 2`
    ssid=$(echo $ssid | sed -e 's/^"/\\"/' | sed -e 's/\([^\]\)"/\1\\"/g' | sed -e 's/\([^\]\)"/\1\\"/g' | sed -e 's/\([^\]\)\(\\[^"\\\/bfnrtu]\)/\1\\\2/g' | sed -e 's/\([^\]\)\\$/\1\\\\/')
    echo "ssid: $ssid"

    bssid=${wpa_status##*bssid=}
    bssid=`echo ${bssid} | cut -d ' ' -f 1 | tr '[:lower:]' '[:upper:]'`
    echo "bssid: $bssid"
#    bssid=`matool_get_mac`
#    ssid="Xiaomi_Family_5G"

    ip=${wpa_status##*ip_address=}
    ip=`echo ${ip} | cut -d ' ' -f 1`
    echo "ip: $ip"

    wpa_status=`ifconfig ${ifname}`

    netmask=${wpa_status##*Mask:}
    netmask=`echo ${netmask} | cut -d ' ' -f 1`
    echo "netmask: $netmask"

    gw=`route -n|grep 'UG'|tr -s ' ' | cut -f 2 -d ' '`
    echo "gw: $gw"

    # get vendor and then version
    vendor="xiaomi"
    rom_version=`uci -q -c /usr/share/mico/ get version.version.ROM`
    if [ -z $rom_version ]; then
	rom_version="unknown"
    fi
    
    #-1:device unregister
    local partner_token_ext=""
    UID=`matool_get_super_admin`
    if [ "${after_wifi_start}" = "1" ] && [ "$UID" = "-1" -o "$UID" = "" ]; then
　　　　#after init
        mico_log "no mico uid, miio try get new mico token&did"
        partner_token=`matool --method identifyDevice`
        [ x$partner_token = x ] & {
            mico_log "miio get token faild need retry"
　           return 1;
        }
        partner_token_ext="\"partner_token\":\"${partner_token}\","
        partner_id=`matool_get_device_id`
    fi

    mico_log "miio get mico did"
    partner_id=`matool_get_device_id`

RSP_BUF="{\"method\":\"_internal.info\",\"params\":{\
\"hw_ver\":\"Linux\",\"fw_ver\":\"$rom_version\",\
\"partner_id\":\"${partner_id}\","${partner_token_ext}"
\"ap\":{\
\"ssid\":\"$ssid\",\"bssid\":\"$bssid\"\
},\
\"netif\":{\
 \"localIp\":\"$ip\",\"mask\":\"$netmask\",\"gw\":\"$gw\"\
}}}"

    after_wifi_start=1
    if [ -f /tmp/ap_config_mode_flag ]; then
        mico_log "miio mico exit ap config mode"
        rm /tmp/ap_config_mode_flag
        ubus call mibt ble '{"action":"hidden"}'
        ubus call mibt enable '{"btmode":"classic", "action":"close"}'
    fi

    mico_log "RESPONSE:" $RSP_BUF
    $MIIO_SEND_LINE "$RSP_BUF"
}

wifi_connect()
{
    local ssid=$1
    local passwd=$2
    
    export LED_PARENT=miio_client_helper
    /bin/show_led 10
str="ctrl_interface=/var/run/wpa_supplicant\n
ap_scan=1\n
\n
network={\n
  ssid=\"$ssid\"\n
  psk=\"$passwd\"\n
  scan_ssid=1\n
  key_mgmt=WPA-PSK\n
}\n"
    echo -e $str > /data/wifi/wpa_supplicant.conf
    sync
    /etc/init.d/wireless restart


    wait_dhcp_done

    export LED_PARENT=miio_client_helper
    /bin/shut_led 10
}

wait_dhcp_done()
{
    local wait_times=0
    while true;            
    do
        [ -f "/data/status/dhcp_done" ] && break;

        [ $((${wait_times})) -ge 30 ] && { 
            mico_log "dhcp faild!"
            rm /data/wifi/wpa_supplicant.conf
            /etc/init.d/wireless restart
            break
        };

        wait_times=$((${wait_times}))+1;
        sleep 1;
    done
}

config_clean()
{
    rm /data/status -r -f > /dev/null 2>&1;
    rm /data/messagingagent -r -f > /dev/null 2>&1;
    rm /data/.mediaplayerconfig -r -f> /dev/null 2>&1;
    rm /data/mibrain/mibrain_asr_nlp.rcd > /dev/null 2>&1;
    rm /data/bt/bt_devices.xml > /dev/null 2>&1;
    rm /data/upnp-disc -r -f > /dev/null 2>&1;
    rm /data/miio/dtoken -r -f >/dev/null 2>&1;
    /etc/init.d/alarm restart;
    /etc/init.d/mediaplayer restart;
    /etc/init.d/messagingagent restart;
    /etc/init.d/pns restart;
    /etc/init.d/mibrain_service restart;
    sync
    return;
}

process_wifistart()
{
    local restart_miio=0
    local ssid=
    local uid=
    local passwd=

    msg="{\"method\":\"_internal.wifi_connected\"}"
    mico_log "$1"
    $MIIO_SEND_LINE $msg
    after_wifi_start=1

    json_init
    json_load "$1"
    json_select params
    json_get_var ssid ssid
    json_get_var uid uid
    json_get_var passwd passwd
    json_cleanup

    #mico app init / miio_service 
    [ "$ssid" = "dummy" -a "$passwd" = "dummy" ] && {
        mico_log "started by miio_service don't change wifi config"
        return
    }

    #if uid=0 means sync from miwifi router miio_notify. it means local wifi ssid/passwd　changed
    
    local current_uid=`matool_get_super_admin`
    [ "$uid" != "0" -a "$uid" != "$current_uid" -a "$current_uid" != "" -a "$current_uid" != "-1" ] && {
        mico_log "change uid, old:$current_uid, new:$uid, rm all config, restart service"
        config_clean
        restart_miio=1
    }

    wifi_connect "$ssid" "$passwd"

    if [ "$restart_miio" = "1" ]; then
        sleep 3
        mico_log "reset miio"
        /etc/init.d/miio restart
    fi

}

main() {
    local RECV_BUF=""
    local which_method=""

    while true; do
	RECV_BUF=`$MIIO_RECV_LINE`
	if [ $? -ne 0 ]; then
	    sleep 1;
	    continue
	fi
        echo "##################################################"
        mico_log "received command "${RECV_BUF}

        json_init
        json_load "$RECV_BUF"
        json_get_var which_method method
        json_cleanup
        
        [ "x$which_method" == "x" ] && {
        #fix a stupid miio_client bug which some commends lack of  "}" at the end of json string.
            RECV_BUF=$RECV_BUF"}"
            json_init
            json_load "$RECV_BUF"
            json_get_var which_method method
            json_cleanup    
        }
 
        mico_log "method from miio_client: $which_method"
        case $which_method in
        "_internal.info")
            process_info "$RECV_BUF"
            ;;
        "_internal.req_didkeymac2")
            process_didkeymac2 "$RECV_BUF"
            ;;
	"_internal.req_wifi_conf_status")
            process_wifi_status "$RECV_BUF"
            ;;
	"_internal.wifi_start")
            process_wifistart "$RECV_BUF"
            ;;
	"_internal.request_dinfo")
	    process_dinfo "$RECV_BUF"
            ;;
	"_internal.request_dtoken")
	    process_dtoken "$RECV_BUF"
            ;;
	*)
	    sleep 1
	esac

    done
}

helper_ready_send
:


main

