#!/bin/sh
timeout="$1"
once="$2"
#
. /lib/mico_common.sh


NTPSTATUSFLAG="/tmp/ntp.status"
SCRIP_PATH='/etc/hotplug.d/ntp'

dlog() {
    logger -s -p warn -t "NTP" "$@"
}

run_scripts() {
    dlog "Begin run ntp script in $SCRIP_PATH"
    for i in $SCRIP_PATH/*; do
	dlog "exec $i"
	$i $1 &>/dev/null
    done &
}

time_sync_done(){
    dlog "INFO: $1 sync ok."
    echo -e "ok,`date +"%Y%m%d%H%M%S"`, $1" >$NTPSTATUSFLAG 2>/dev/null
    # run background
    run_scripts $(date +%s)
}

# get time from http header
#root@mico:/# date +%s
#1513067915
#root@mico:/# date -s "@1513067915"
#Tue Dec 12 16:38:35 CST 2017
#root@mico:/# date
#Tue Dec 12 16:38:39 CST 2017
matool_query_times=0
matool_check_time()
{
    REMOTE_DATE_FILE=/tmp/ntp.matool_time
    DATE_TS_MIN=$(date -d "2000-01-01 00:00:00" +%s)
    DATE_TS_MAX=$(date -d "2200-01-01 00:00:00" +%s)
    #local checkurl='www.mi.com'
    matool_query_times=$(expr $matool_query_times + 1)
    [ $matool_query_times -gt 3 ] && return 0;
    matool_time_sync 1> ${REMOTE_DATE_FILE}
    [ $? -ne 0 ] && return 1;

    #output is digital
    remote_time=$(cat $REMOTE_DATE_FILE |grep '^[[:digit:]]*$')
    #remote_time=$(uci -c /usr/share/mico get version.version.BUILDTS)
    [ "x$remote_time" == "x" ] && return 1;

    #ts->seconds
    remote_time=$(expr  ${remote_time} / 1000)
    [ $remote_time -gt $DATE_TS_MAX ] && return 1;
    [ $remote_time -lt $DATE_TS_MIN ] && return 1;

    local_time=$(date +%s)
    local_diff=$(expr $remote_time - $local_time)
    dlog "local time: $local_time, remote time:$remote_time, time diff $local_diff"
    [ $local_diff -gt 600 ] && return 1;
    [ $local_diff -lt -600 ] && return 1;

    return 0;
}

htp_backup() {
    htphost="www.mi.com"
    timeout -t 10 htpdate -d -4 -l -t -s $htphost
    [ $? -ne 0 ] && {
        return 1;
    }

    return 0
}

tryset_clock() {
    local ret=0
    local sync_type=ntp
    eval "$ntpcmd"
    [ $? -ne 0 ] && {
    #[ 1 -ne 0 ] && {
        dlog "WARN: ntp update failed, try htp"
        htp_backup
        local ret=$?
        [ $ret -ne 0 ] && dlog "ERROR: htp failed."
        sync_type=htp
    }

    [ $ret -eq 0 ] && {
        matool_check_time
        ret=$?
        [ $ret == 0 ] && {
            time_sync_done "$sync_type"
        }
    }

    return $ret
}

dhcp_wait()
{
    while true 
    do
        [ -f "/data/status/dhcp_done" ] && break;
        sleep 1;
    done
}

internet_wait()
{
    while true 
    do
        response_buf=$(curl --connect-timeout 8 api.mina.mi.com/ping)
        [ "x$response_buf" == "xgood" ] && {
            dlog "ntp internet check success."
            break;
        }
        sleep 60
    done
}

time_init_buildtime()
{
    buildts=$(uci -c /usr/share/mico get version.version.BUILDTS)
    [ "x$buildts" != "x" ] && date -s "@$buildts"
}

status_check()
{
    NTPSTATUS=$(cut -d, -f1 $NTPSTATUSFLAG 2>/dev/null)
    if [ "$NTPSTATUS" = "ok" ];then
        local last_sync=$(cut -d, -f2 $NTPSTATUSFLAG 2>/dev/null)
        echo "INFO: ntp sync sucessed at $last_sync, exit loop."
        exit 0
    fi
}

LOCKFILE=/var/lock/ntpd-ifup
trap "lock -u ${LOCKFILE}; exit" INT TERM EXIT
if ! lock -n $LOCKFILE; then
    dlog "ntp already running, skip this sync"
    trap '' EXIT
    exit 0
fi

NTPSTATUS=$(cut -d, -f1 $NTPSTATUSFLAG 2>/dev/null)
if [ "$(/bin/date -u +%s 2>/dev/null)" -lt "0" ]; then
	/bin/date -s "1970-01-01 13:00:00" 2>/dev/null && logger -t "ntpsetclock" "fix epoch time ok $(/bin/date -u +%s 2>/dev/null)"
fi

if [ "$NTPSTATUS" = "ok" ];then
    local last_sync=$(cut -d, -f2 $NTPSTATUSFLAG 2>/dev/null)
    echo "INFO: last ntp sync sucessed at $last_sync"
    [ -n "$once" ] && exit 0
fi


ntpservers="$(uci get system.ntp.server)"
echo "$ntpservers"| grep -q "hk.pool.ntp.f25.me"
if [ $? -eq 0 ]
	then
	uci set system.ntp.server="0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org 3.asia.pool.ntp.org 0.asia.pool.ntp.org 0.cn.pool.ntp.org" 2>/dev/null&&uci commit
	if [ $? -eq 0 ]
		then
		echo "INFO: old ntp server list ,update ntp server sucessed!"
	else
		echo "ERROR: old ntp server list ,update ntp server  failed!"
	fi
	ntpservers="0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org 3.asia.pool.ntp.org 0.asia.pool.ntp.org 0.cn.pool.ntp.org"
fi

test -z "$ntpservers" && ntpservers="0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org 3.asia.pool.ntp.org 0.asia.pool.ntp.org 0.cn.pool.ntp.org"

#do not print debugging info
ntpcmd="/usr/sbin/ntpd -N -q -n -4"
for onentpsrv in $ntpservers
do
	ntpcmd="$ntpcmd -p $onentpsrv"
done

status_check
case $timeout in
    post)
	dlog "INFO: wan up event, ntp sync called."
	dlog "INFO: delay 3 seconds befor sync."
        time_init_buildtime
	sleep 3
        tryset_clock
    ;;
    now)
	dlog "INFO:  emergency ntp sync called."
        tryset_clock
    ;;
    rand)
	sleeptm=`cat /dev/urandom |head -c 30|md5sum | tr -d [0a-zA-Z- ]  2>/dev/null`
	sleeptm=$((${sleeptm:0:8}%300))
	dlog "INFO: random ntp sync called."
	dlog "sleep $sleeptm for ntpd sync"
	sleep $sleeptm
        tryset_clock
    ;;
    loop)
        time_init_buildtime
        dhcp_wait
        internet_wait
        while true
        do
            status_check
            dlog "INFO: loop ntp sync called."
            tryset_clock
            [ $? == 0 ] && {
                dlog "loop try set clock success.exit."
                killall -9 alarmd;
                exit;
            }
            sleep 120
        done
    ;;
    *)
	timeout=60
    ;;
esac

killall -9 alarmd;

#eval "$ntpcmd"
#if [ $? -ne 0 ]
#then
#    dlog "WARN: ntp update failed: $ntpcmd, try htp"
#    htp_backup
#    return $i
#else
#    time_sync_done "ntp"
#    return 0
#fi

