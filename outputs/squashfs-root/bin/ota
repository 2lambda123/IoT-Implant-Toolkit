#!/bin/sh

OTA_ALL="mico_all.bin"
OTA_ROOT="mico_firmware.bin"
OTA_PATH="/tmp"
OTA_FILE="/tmp/mico_ota.bin"
OTA_MD5_FILE="$OTA_FILE.md5"
ROOT_URL="http://api.miwifi.com/rs/grayupgrade"
export LED_PARENT=ota

mkdir -p "/tmp/status"

clean_temp() {
    echo "" > /tmp/log/message
    [ -f /tmp/log/message.old ] && {
        echo "" > /tmp/log/message.old
    }
    /etc/init.d/pns stop
    /etc/init.d/mediaplayer.init stop
    /etc/init.d/miio stop
    echo 3 > /proc/sys/vm/drop_caches
}

clean_oldconfig() {
    [ -f "/data/pns/wuw_chn.fcf" ] && rm /data/pns/wuw_chn.fcf
}

ftp_download() {
    ota="$1"
    ota_out="$OTA_PATH/$ota"
    /bin/show_led 2
    curl ftp://10.118.16.28/${ota} --user miwifi:xiaoqiang123 -o ${ota_out}
    [ $? -eq 0 ] && {
        clean_oldconfig
        flash.sh $ota_out
    }
}

check() {
    set_upgrade_status "check"
    matool_check_upgrade
}

donot_need_upgrade() {
    set_upgrade_status "no_need"
}

download_upgrade() {
    clean_temp
    logger -t ota -p warn 'Clean log before download ota'
    set_upgrade_status "download"
    wget -t3 -T30 "$1" -O $OTA_FILE
}

verify_upgrade() {
    set_upgrade_status "verify"
    echo $1'  '$OTA_FILE > $OTA_MD5_FILE
    md5sum -c $OTA_MD5_FILE
    return $?
}

upgrade() {
    if [ -z "$1" ]; then
        echo "upgrade url is empty!"
        return 1
    fi
    if [ -z "$2" ]; then
        echo "upgrade checksum is empty!"
        return 1
    fi
    /bin/show_led 2
    if download_upgrade "$1"; then
        if verify_upgrade "$2"; then
            set_upgrade_status "burn"
            clean_oldconfig
            flash.sh $OTA_FILE > /dev/null
            return 0
        else
            rm $OTA_FILE
            set_upgrade_status "ota_failed"
            /bin/show_led 0
            return 1
        fi
    else
        rm $OTA_FILE
        set_upgrade_status "ota_failed"
        /bin/show_led 0
        return 1
    fi
}

check_and_upgrade() {
    if [ -z "$1" ]; then
        set_upgrade_status "check"
        result=$(matool_check_upgrade)
        if [ $? -eq 0 ] ; then
            url=$(echo "$result" | head -n1)
            checksum=$(echo "$result" | tail -n1)
            upgrade "$url" "$checksum"
        else
            donot_need_upgrade
        fi
        return $?
    fi
    upgrade $1 $2
}

slient_check_and_upgrade() {
    logger -t ota_slient -p 3 "Checking OTA ..."
    sn=$(getmac.sh sn | tr -d '\n' | tail -c1)
    day=$(date +%d | tail -c2)
    MAXWAIT=3600
    if [ "$sn" = "$day" ]; then
	logger -t ota_slient -p 3 "Wait random start..."
	sleep $((RANDOM % MAXWAIT))
	logger -t ota_slient -p 3 "Wait random done..."
        check_and_upgrade
    fi
}

case "$1" in
    success)
    set_upgrade_status success
    ;;
    ftp)
    clean_temp
    ftp_download $OTA_ROOT
    ;;
    uboot)
    clean_temp
    ftp_download $OTA_ALL
    ;;
    check)
    check
    ;;
    ble)
    check_and_upgrade $2 $3
    ;;
    upgrade)
    check_and_upgrade $2 $3
    ;;
    slient)
	slient_check_and_upgrade
    ;;
    *)
esac
